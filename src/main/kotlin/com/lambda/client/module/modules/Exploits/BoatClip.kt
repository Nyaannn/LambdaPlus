package com.lambda.client.module.modules.Exploits
import baritone.api.utils.Helper
import com.lambda.client.event.listener.listener
import com.lambda.client.module.Category
import com.lambda.client.module.Module
import com.lambda.client.module.modules.player.Timer
import com.lambda.client.util.text.MessageSendHelper
import net.minecraft.client.gui.GuiMainMenu
import net.minecraft.client.gui.GuiMultiplayer
import net.minecraft.entity.Entity
import net.minecraftforge.fml.common.gameevent.TickEvent
import net.minecraftforge.fml.common.network.FMLNetworkEvent
object BoatClip : Module(
    name = "ClipFlight",
    description = "Clips you\nTHIS IS VERY BUGGY IT WILL CRASH YOU IF IT IS ENABLED IN THE MAIN MENU\nTO FIX THIS YOU WILL NEED TU MANUALLY EDIT YOUR CONGIG TO DISABLE IT",
    category = Category.EXPLOITS,
    showOnArray = true,
    modulePriority = 0
) {
    private val Delay by setting("Delay",  0,0..100, 1, description = "Spam tick delay")
    private val UpCLip by setting("Vertical",  0,-100..100, 1, description = "Vertical clip")
    private val Forward by setting("Horizontal",  0,-100..100, 1, description = "Horizontal clip" )
    private val Feedback by setting("Feedback",  false, description = "Feedback")
    private val TimerToggle by setting("Timer",  false, description = "Use timer?")
    private val way2go by setting("Axis", AXIS.X)
    private enum class AXIS {
        X, Z
    }
    private var counter = 0;
    init {
        onEnable { counter =0;
            if(TimerToggle==true){
            Timer.enable()}
        }
        onDisable {
            if(TimerToggle==true){
            Timer.disable()}
        }
        listener<FMLNetworkEvent.ClientDisconnectionFromServerEvent> {
            if(this.isEnabled == true) {
                this.disable();
            }
        }
        listener<TickEvent.ClientTickEvent> {
            if(this.isEnabled == true) {
                counter++;
                if(counter == Delay) {
                    val entity: Entity ? = if (Helper.mc.player.ridingEntity != null) Helper.mc.player.ridingEntity else Helper.mc.player
                    counter =0;
                    if(way2go == AXIS.X){
                        if (entity != null) {
                            entity.setPosition(
                                mc.player.posX+ Forward.toDouble(), mc.player.posY +0.5 + UpCLip.toDouble(), mc.player.posZ)
                            if(Feedback==true){MessageSendHelper.sendChatMessage("Clipped Forward $Forward Block/s & Clipped $UpCLip Block/s")}
                        };
                    }
                    if(way2go == AXIS.Z){
                        if (entity != null) {
                            entity.setPosition(
                                mc.player.posX, mc.player.posY + 0.5 + UpCLip.toDouble(), mc.player.posZ+ Forward.toDouble())
                                if(Feedback==true){MessageSendHelper.sendChatMessage("Clipped Forward $Forward Block/s & Clipped $UpCLip Block/s")}
                        };
                    }
                }
            }
          }
        }
}

