package com.lambda.client.module.modules.Exploits

import com.lambda.client.manager.managers.FriendManager
import com.lambda.client.manager.managers.WaypointManager
import com.lambda.client.module.Category
import com.lambda.client.module.Module
import com.lambda.client.module.modules.client.NotifColor
import com.lambda.client.util.EntityUtils.flooredPosition
import com.lambda.client.util.EntityUtils.isFakeOrSelf
import com.lambda.client.util.TickTimer
import com.lambda.client.util.TimeUnit
import com.lambda.client.util.text.MessageSendHelper
import com.lambda.client.util.text.MessageSendHelper.sendServerMessage
import com.lambda.client.util.text.format
import com.lambda.client.util.threads.safeListener
import net.minecraft.client.audio.PositionedSoundRecord
import net.minecraft.entity.player.EntityPlayer
import net.minecraft.init.SoundEvents
import net.minecraft.util.text.TextFormatting
import net.minecraftforge.fml.common.gameevent.TickEvent
import kotlin.math.round

object PokeCom : Module(
    name = "PokeCom",
    description = "exploit",
    category = Category.EXPLOITS,
    alwaysListening = true
) {
    private const val NAME_FORMAT = "\$NAME"

    private val friends by setting("Friends", true)
    private val wpadd by setting("Waypoint", true)

    private val playerSet = LinkedHashSet<EntityPlayer>()
    private val timer = TickTimer(TimeUnit.SECONDS)

    init {
        safeListener<TickEvent.ClientTickEvent> {
            if (it.phase != TickEvent.Phase.END || !timer.tick(1L)) return@safeListener

            val loadedPlayerSet = LinkedHashSet(world.playerEntities)
            for (entityPlayer in loadedPlayerSet) {
                if (entityPlayer.isFakeOrSelf) continue
                if (!friends && FriendManager.isFriend(entityPlayer.name)) continue

                if (playerSet.add(entityPlayer) && isEnabled) {
                    onEnter(entityPlayer)
                }
            }

            val toRemove = ArrayList<EntityPlayer>()
            for (player in playerSet) {
                if (!loadedPlayerSet.contains(player)) {
                    toRemove.add(player)
                }
            }
            playerSet.removeAll(toRemove.toSet())
        }
    }

    private fun onEnter(player: EntityPlayer) {
        val name = player.name
        MessageSendHelper.sendChatMessage("[&${NotifColor.dcolor}PokeCom&f] ${player.name} at X:${round(player.posX)} Y:${round(player.posY)} Z:${round(player.posZ)}");
       if(wpadd==true){ WaypointManager.add(player.flooredPosition, player.displayNameString)}

    }

    private fun String.replaceName(player: EntityPlayer) = replace(NAME_FORMAT, getColor(player) format player.name)
    private fun getColor(player: EntityPlayer) =
        if (FriendManager.isFriend(player.name)) TextFormatting.GREEN
        else TextFormatting.RED


}